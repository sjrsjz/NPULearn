#import "@preview/zebraw:0.5.5": *
#import "@preview/cuti:0.3.0": show-cn-fakebold
#show: show-cn-fakebold
#set document(title: "NPULearn软件需求说明书", author: "NPULearn团队")
#set text(font: ("SimSun", "STSong"), size: 12pt)
#set heading(numbering: "1.")
#show heading.where(level: 1): it => text(font: "SimHei", it)
#set text(lang: "zh")
// 优化代码块显示规则
#show raw: it => {
  // 对行内代码应用特殊样式
  if not it.block {
    box(inset: (x: 0.25em, y: 0.1em), outset: (y: 0.2em), fill: luma(240), radius: 2pt, text(it.text, font: (
      "Consolas",
      "Cascadia Code",
      "SimHei",
    )))
  } else {
    // 对代码块应用zebraw高亮，并禁用行号
    text(
      zebraw(
        it,
        numbering: false,
      ),
      font: ("Consolas", "Cascadia Code", "SimHei"),
    )
  }
}

#align(center)[
  #v(8em)
  #text(size: 24pt, weight: "bold")[NPULearn 软件需求说明书]
  #v(2em)
  #text(size: 16pt)[（按GB/T 8567-88标准编制）]

  #v(30em)

  #align(center)[
    #text(size: 12pt)[
      文档标识：NPU-SRS-001\
      版本：v1.0\
      编制日期：2025年4月15日\
      编制单位：NPULearn开发团队
    ]
  ]
]

#let numbering = (..it) => {
  it.at(0) - 1
}
#set page(numbering: numbering, margin: (x: 2.5cm, y: 2.5cm))

#pagebreak()

= 文档修改记录

#table(
  columns: (auto, auto, auto, auto, auto),
  align: center,
  stroke: 0.5pt,
  [*版本*], [*修改日期*], [*修改人*], [*修改内容*], [*审核人*],
  [v1.0], [2025-04-15], [NPULearn团队], [初始版本], [孙家泽],
)

#pagebreak()
#outline()
#pagebreak()

= 引言

== 编写目的
本文档按照GB/T 8567-88《计算机软件需求说明书规范》编制，旨在全面、准确地描述NPULearn智能学习助手软件的功能需求、性能需求、设计约束和质量要求，为系统设计、编码实现、测试验证和项目管理提供依据。

本文档的预期读者包括：
- 项目开发团队成员
- 系统设计人员
- 测试工程师
- 项目管理人员
- 用户代表
- 维护人员

== 背景
说明：\
a) 待开发软件系统的名称：NPULearn智能学习助手

b) 本项目的任务提出者、开发者、用户及实现该软件的计算中心或计算机网络：
   - 任务提出者：西北工业大学"AI赋能·智启翱翔"主题竞赛
   - 开发者：NPULearn开发团队
   - 用户：西北工业大学师生
   - 实现环境：跨平台桌面应用（Windows、macOS、Linux、Android）

c) 该软件系统同其他系统或其他机构的基本的相互来往关系：
   - 与多种AI服务提供商的API接口（DeepSeek、Gemini、Coze）
   - 与Wolfram Alpha计算平台的集成
   - 与学术文献数据库的连接
   - 与校园网络环境的适配

== 定义
本文档中使用的专门术语定义如下：

- *AI（人工智能）*：Artificial Intelligence，指通过机器学习等技术实现的智能系统
- *CoT（思维链）*：Chain of Thought，一种让AI模型展示推理过程的技术
- *API*：Application Programming Interface，应用程序编程接口
- *富文本*：包含格式信息的文本，支持字体、颜色、链接等样式
- *渲染*：将数据转换为可视化显示内容的过程
- *流式响应*：实时传输和显示数据的技术

== 参考资料
- GB/T 8567-88 计算机软件需求说明书规范
- GB/T 8566-88 计算机软件开发规范
- IEEE Std 830-1998 软件需求规格说明推荐实践
- "AI赋能·智启翱翔"竞赛技术要求文档

= 任务概述

== 目标
NPULearn是一个专为西北工业大学校园场景设计的基于人工智能的智能学习助手桌面应用。系统旨在通过集成多种AI模型和专业工具，为不同层次的学习者和科研人员创造个性化、高效且易用的智能学习环境，响应"AI赋能·智启翱翔"主题要求。

== 用户的特点
=== 用户类型
1. *本科生群体*
   - 特点：学习任务重、基础知识需要巩固、对新技术接受度高
   - 需求：课程学习辅导、作业解答、考试复习指导

2. *研究生群体*
   - 特点：具备一定专业基础、需要深入研究、时间相对充裕
   - 需求：学术研究支持、论文写作指导、实验数据分析

3. *教师群体*
   - 特点：专业知识深厚、教学经验丰富、对工具效率要求高
   - 需求：教学内容准备、课程设计支持、学术研究辅助

4. *科研团队*
   - 特点：团队协作需求强、数据处理量大、对精确性要求高
   - 需求：文献调研、数据分析、实验结果解读

=== 用户技能水平
- 计算机操作：中等到高级水平
- 专业知识：根据用户类型从入门到专家级别
- AI工具使用：初级到中级水平

== 假定和约束

=== 假定
1. 用户具备基本的计算机操作能力
2. 用户能够接入稳定的互联网连接
3. AI服务提供商的API服务稳定可用
4. 用户愿意学习和使用新的AI辅助工具

=== 约束
1. *技术约束*
   - 必须基于Tauri + Vue 3 + TypeScript架构
   - 后端核心逻辑使用Rust语言实现
   - 需要支持跨平台部署
   - 优先选择开源组件和框架

2. *法律约束*
   - 遵循各AI服务商的使用条款和限制
   - 符合相关开源许可证要求
   - 满足数据保护和隐私法规
   - 确保知识产权合规使用

3. *资源约束*
   - 开发周期限制在2个月内
   - 团队规模和技术能力限制
   - API调用成本需要控制在合理范围
   - 服务器和基础设施成本限制

= 需求规定

== 对功能的规定

=== 功能划分
系统功能按照模块化设计原则划分为以下主要部分：

==== AI智能对话模块
*功能标识*：F001

*功能描述*：提供基于多种AI模型的智能对话功能，支持学术问答、知识查询、问题解答等核心交互。

*输入*：
- 用户文本输入
- 用户选择的AI模型
- 对话历史上下文
- 系统配置参数

*处理*：
- 请求预处理和安全检查
- AI模型API调用
- 响应内容解析和格式化
- CoT思维链处理（可选）
- 流式响应处理

*输出*：
- 格式化的AI响应内容
- 思维链推理过程（如启用）
- 相关建议和推荐
- 错误信息（如有）

*性能要求*：
- 响应延迟 < 3秒（不含AI模型处理时间）
- 支持并发请求处理
- 99.5%的可用性保证

==== 富文本渲染模块
*功能标识*：F002

*功能描述*：提供强大的富文本内容渲染能力，支持Markdown、数学公式、图表等多种格式的显示。

*输入*：
- Markdown格式文本
- LaTeX数学公式
- Mermaid/Pintora图表描述
- 主题配置信息

*处理*：
- 内容格式识别和解析
- 异步渲染处理
- 缓存机制应用
- 主题适配处理

*输出*：
- 渲染后的HTML内容
- 样式化的数学公式
- 交互式图表
- 错误提示信息

*性能要求*：
- 渲染时间 < 2秒
- 支持批量渲染
- 内存占用优化

==== 智能工具协作模块
*功能标识*：F003

*功能描述*：集成专业工具，通过智能编排提供一站式问题解决方案。

*输入*：
- 用户查询请求
- 工具选择偏好
- 计算参数
- 代码内容

*处理*：
- 需求识别和工具选择
- Wolfram Alpha API调用
- Python代码安全执行
- 结果整合和优化

*输出*：
- 计算结果和可视化
- 代码执行结果
- 知识库查询结果
- 工具推荐建议

==== 文档处理模块
*功能标识*：F004

*功能描述*：智能处理多种格式文档，提供文档分析、总结和问答功能。

*输入*：
- PDF/Word/文本文档
- 用户查询问题
- 分析配置参数

*处理*：
- 文档内容提取和解析
- 智能摘要生成
- 关键信息识别
- 问答匹配处理

*输出*：
- 文档摘要和要点
- 问题答案和引用
- 结构化分析结果
- 相关内容推荐

==== 用户管理模块
*功能标识*：F005

*功能描述*：管理用户设置、历史记录、主题配置等个人化信息。

*输入*：
- 用户配置信息
- API密钥设置
- 主题偏好选择
- 历史记录数据

*处理*：
- 安全的数据存储
- 配置验证和管理
- 历史记录智能分组
- 主题自动适配

*输出*：
- 个性化界面配置
- 安全的数据管理
- 智能历史分类
- 用户偏好应用

=== 功能组合
各功能模块通过标准化接口进行组合，形成完整的用户工作流：

1. *学习辅导流程*：AI对话 → 富文本渲染 → 工具协作 → 结果展示
2. *文档分析流程*：文档上传 → 内容解析 → AI分析 → 问答交互
3. *科研支持流程*：问题输入 → 工具选择 → 计算处理 → 结果可视化

== 对性能的规定

=== 精度
- 数学计算精度：支持双精度浮点运算
- 文本处理精度：99%以上的字符识别准确率
- AI响应准确性：依赖于所选AI模型的固有精度

=== 时间特性要求
- 系统启动时间：≤ 5秒
- 用户界面响应时间：≤ 500毫秒
- AI对话响应时间：≤ 3秒（不含AI模型处理时间）
- 文档渲染时间：≤ 2秒
- 文件上传处理时间：≤ 10秒（100MB以内文件）

=== 灵活性
- 支持多种AI模型动态切换
- 支持插件化功能扩展
- 支持自定义主题和界面配置
- 支持多语言界面（中文、英文）

== 对输入输出的规定

=== 输入格式
- 文本输入：UTF-8编码，支持多语言
- 文档格式：PDF、DOCX、TXT、MD等常见格式
- 图像格式：PNG、JPEG、GIF、SVG等
- 代码格式：支持主流编程语言语法

=== 输出格式
- 文本输出：格式化HTML、纯文本、Markdown
- 图表输出：SVG、PNG格式
- 数据输出：JSON、CSV格式
- 文档输出：PDF、HTML格式

=== 数据格式
- 配置数据：JSON格式存储
- 历史记录：SQLite数据库
- 缓存数据：二进制格式
- 日志数据：结构化文本格式

== 对数据管理能力的规定

=== 数据量
- 历史对话记录：支持10,000条以上
- 文档缓存：支持1GB本地存储
- 配置数据：支持复杂的层级配置结构
- 临时数据：支持高效的内存管理

=== 数据格式
- 统一使用UTF-8编码
- 结构化数据采用JSON格式
- 二进制数据采用标准压缩格式
- 数据库采用SQLite标准格式

=== 数据组织
- 按用户会话组织历史记录
- 按时间和主题分类数据
- 采用索引提高查询效率
- 实现数据的增量备份

== 故障处理要求

=== 故障分类
1. *系统级故障*：应用程序崩溃、内存溢出等
2. *网络级故障*：API调用失败、网络中断等
3. *数据级故障*：数据损坏、存储空间不足等
4. *用户级故障*：输入错误、操作异常等

=== 故障处理策略
- 自动重试机制：网络请求失败时自动重试最多3次
- 优雅降级：部分功能不可用时保证核心功能正常
- 错误恢复：提供数据恢复和系统重置功能
- 用户提示：清晰的错误信息和解决建议

=== 故障预防
- 输入验证：对所有用户输入进行安全检查
- 资源监控：实时监控内存和存储空间使用
- 异常捕获：完善的异常处理机制
- 日志记录：详细的操作和错误日志

== 其他专门要求

=== 安全保密要求
- API密钥采用AES-256加密存储
- 用户数据本地化存储，不上传云端
- 网络通信采用HTTPS加密
- 定期进行安全漏洞扫描和修复

=== 可靠性要求
- 系统可用性 ≥ 99.5%
- 平均故障恢复时间 < 1分钟
- 数据一致性和完整性保证
- 具备自动故障检测和报告能力

=== 灵活性要求
- 模块化架构支持功能扩展
- 支持新AI模型的快速接入
- 支持第三方工具和服务集成
- 支持个性化配置和定制

== 运行环境规定

=== 设备
*硬件要求*：
- CPU：x86_64或ARM64架构
- 内存：最低4GB RAM，推荐8GB RAM
- 存储：1GB可用磁盘空间
- 网络：稳定的互联网连接

*软件要求*：
- 操作系统：Windows 10/11、macOS 10.15+、Linux主流发行版、Android 8.0+
- 运行时环境：系统自带，无需额外安装
- 网络协议：支持HTTP/HTTPS协议

=== 支持软件
- 系统浏览器引擎（WebKit/Chromium）
- 系统网络栈
- 系统文件管理器
- 系统通知服务

=== 接口
- AI服务商API接口（DeepSeek、Gemini、Coze）
- Wolfram Alpha API接口
- 系统文件系统接口
- 系统网络接口
- 系统UI框架接口

=== 控制
- 用户通过图形界面进行操作控制
- 系统配置通过设置界面管理
- 服务状态通过系统托盘监控
- 数据管理通过内置工具控制

= 运行概念
系统采用事件驱动的架构模式，主要运行流程如下：

1. *系统初始化*：加载配置、初始化模块、检查网络连接
2. *用户交互*：接收用户输入、处理交互事件、更新界面状态
3. *AI服务调用*：构建请求、调用API、处理响应、展示结果
4. *数据管理*：自动保存、定期清理、备份恢复、同步更新
5. *系统维护*：性能监控、错误处理、日志记录、资源管理

= 条件与限制

== 条件
- 需要稳定的互联网连接访问AI服务
- 需要有效的AI服务商API密钥
- 需要符合最低硬件配置要求的设备
- 需要用户具备基本的计算机操作能力

== 限制
- 受AI服务商API调用频率限制
- 受网络带宽和延迟影响
- 受本地存储空间限制
- 受操作系统兼容性限制
- 受开源许可证使用条款限制

= 验收标准

== 功能测试标准
- 所有核心功能模块正常运行
- AI模型切换和调用成功率 ≥ 95%
- 文档处理和渲染准确率 ≥ 98%
- 用户设置保存和恢复成功率 = 100%

== 性能测试标准
- 满足所有性能指标要求
- 压力测试下系统稳定运行
- 内存泄漏测试通过
- 并发用户测试达标

== 兼容性测试标准
- 在所有目标操作系统上正常运行
- 不同硬件配置下功能完整
- 多分辨率屏幕正确显示
- 无障碍功能测试通过

== 安全测试标准
- 数据加密功能验证通过
- 网络安全测试无严重漏洞
- 输入验证机制有效
- 隐私保护措施完善